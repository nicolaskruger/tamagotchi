{"version":3,"sources":["app/TamagotchiState.ts","actions/actionTypes.ts","actions/actionCreator.ts","reducers/tamagotchiReducers.ts","store.ts","components/button/index.tsx","components/mapStateToProps/index.ts","components/buttons/index.tsx","components/displayImg/index.tsx","components/bar/index.tsx","components/displayStatus/index.tsx","components/display/index.tsx","components/tamagotchi/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TamagotchiState","EAT","SLEEP","WORK","DIE","TO_DEF_MODE","DAMAGE_BY_IDLE","communOper","tamagotchi","key","actionT","state","plus","n","type","tamagotch","currState","damage_by_idle","tama","health","hungry","sleep","arr","Object","keys","forEach","reduce","acc","curr","actionTypes","DEAD","STANDAR","initialState","tamagotchiReducer","action","middleWare","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","Button","name","className","onClick","mapStateToProps","connector","connect","SLEEPING","eat","EATING","work","to_def_mode","useState","call","setCall","operProxy","func","setTimeout","p_sleep","p_eat","p_work","Buts","map","v","i","DisplayImg","dots","setDots","swith","upDots","useEffect","timer","setInterval","clearInterval","repeat","Bar","val","text","split","DisplayStatus","Tamagotchi","damage","getState","dispatch","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAAKA,E,6EAAAA,O,qBAAAA,I,uBAAAA,I,eAAAA,I,mBAAAA,I,gBAAAA,M,KCAE,IAAMC,EAAM,MACNC,EAAQ,QACRC,EAAO,OACPC,EAAM,MACNC,EAAc,cACdC,EAAiB,iBCMxBC,EAAa,SAACC,EAAwBC,EAAuBC,EAAgBC,EAAuBC,GACtG,IAPcC,EAed,MARiC,CAC7BC,KAAMJ,EACNK,UAAU,2BACHP,GADE,kBAEJC,GAXKI,EAWUL,EAAWC,GAAKG,EAVjCC,GAAG,GAAGA,EAAE,MAYXG,UAAWL,IAqDZ,SAASM,EAAeF,GAC3B,IAAMG,EAAmB,CACrBC,OAAQ,EACRC,OAAQ,EACRC,MAAO,GAELC,EAAOC,OAAOC,KAAKT,GAMzB,OALAO,EACKG,SAAQ,SAAAhB,GAvEA,IAACI,EAwENK,EAAKT,IAxECI,EAwEeE,EAAUN,GAAK,IAvElC,EAAEI,EAAE,KAyEFS,EAAII,QAAO,SAACC,EAAIC,GAAL,OAAYD,GAAkB,IAAbT,EAAKU,MAAU,GAhCtB,CAC7Bd,KAAMe,EACNd,UAAW,CACPK,OAAO,EACPD,OAAO,EACPE,MAAM,GAEVL,UAAWhB,EAAgB8B,MA4BE,CAC7BhB,KAAMe,EACNd,UAAU,eACHG,GAEPF,UAAWhB,EAAgB+B,S,mBCtF7BC,EAAgC,CAClCjB,UAAW,CACPI,OAAQ,EACRC,OAAQ,EACRC,MAAO,GAEXL,UAAWhB,EAAgB+B,SAoChBE,EAjCW,WAEwB,IAD9CtB,EAC6C,uDADrBqB,EACxBE,EAA6C,uCAC7C,GAAGvB,EAAMK,YAAchB,EAAgB8B,KACnC,OAAOnB,EACX,OAAQuB,EAAOpB,MACX,KAAKe,EACL,KAAKA,EACL,KAAKA,EACD,OAAGlB,EAAMK,YAAchB,EAAgB+B,QAC5B,CACHf,UAAWkB,EAAOlB,UAClBD,UAAU,eAAKmB,EAAOnB,YAGvBJ,EACX,KAAKkB,EACD,MAAO,CACHb,UAAWkB,EAAOlB,UAClBD,UAAU,eAAKJ,EAAMI,YAE7B,KAAKc,EACL,KAAKA,EAED,MAAO,CACHb,UAAWkB,EAAOlB,UAClBD,UAAU,eAAKmB,EAAOnB,YAE9B,QACI,OAAOJ,ICnCbqB,EAAgC,CAClCjB,UAAW,CACPI,OAAQ,EACRC,OAAQ,EACRC,MAAO,GAEXL,UAAWhB,EAAgB+B,SAGzBI,EAAa,CAACC,KAQdC,EAAmBC,OAAOC,sCAAwCC,IAQzDC,EAPDC,YACVT,EACAD,EACAK,EACIM,IAAe,WAAf,EAAmBR,K,sBCTZS,EAbA,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAKX,EAAwB,EAAxBA,OAClB,OACI,0BAASY,UAAU,kBAAnB,UACI,wBAAQA,UAAU,iBAAiBC,QAAS,kBAAIb,OAGhD,6BACKW,QCPFG,EALS,SAACrC,GAAD,MAA6B,CACjDH,WAAWG,EAAMI,UACjBJ,MAAMA,EAAMK,YCwDDiC,G,MApDGC,YAAQF,EAAgB,CAAC3B,MLgCpC,SAAeb,GAClB,OAAOD,EACHC,EACA,QACAqB,EACA7B,EAAgBmD,SAChB,IKtCyCC,ILc1C,SAAa5C,GAChB,OAAOD,EACHC,EACA,SACAqB,EACA7B,EAAgBqD,OAChB,IKpB6CC,KLuB9C,SAAc9C,GACjB,OAAOD,EACHC,EACA,SACAqB,EACA7B,EAAgBG,KAChB,IK7BkDoD,YLqDnD,SAAqBxC,GAQxB,MAPiC,CAC7BD,KAAMe,EACNd,UAAU,eACHA,GAEPC,UAAWhB,EAAgB+B,WKPpBkB,EA3CC,SAAC,GAA4D,IAA3DzC,EAA0D,EAA1DA,WAAYa,EAA8C,EAA9CA,MAAO+B,EAAuC,EAAvCA,IAAKE,EAAkC,EAAlCA,KAAKC,EAA6B,EAA7BA,YAA6B,EACjDC,oBAAS,GADwC,mBACjEC,EADiE,KAC5DC,EAD4D,KAElEC,EAAY,SAACC,GAAD,OAAiB,WAC/BA,IACIH,GACJI,YACI,WACIN,EAAY/C,GACZkD,GAAQ,KAEZ,KAEJA,GAAQ,KAENI,EAAUH,GAAU,WAAKtC,EAAMb,MAC/BuD,EAAQJ,GAAU,WAAKP,EAAI5C,MAC3BwD,EAASL,GAAU,WAAKL,EAAK9C,MAE7ByD,EAAa,CACf,CAAC/B,OAAO,WACJ4B,KACFjB,KAAK,SACP,CAACX,OAAO,WACJ8B,KACFnB,KAAK,QACP,CAACX,OAAO,WACJ6B,KACFlB,KAAK,QAGX,OACI,qBAAKC,UAAU,eAAf,SACI,6BACKmB,EAAKC,KAAI,SAACC,EAAEC,GAAH,OACN,6BACI,cAAC,EAAD,CAAQvB,KAAMsB,EAAEtB,KAAMX,OAAQiC,EAAEjC,UAD3BkC,cCjBdC,G,MAxBI,SAAC,GAA4B,IAAD,EAA1B1D,EAA0B,EAA1BA,MAA0B,EACpB6C,mBAAS,GADW,mBACpCc,EADoC,KAC/BC,EAD+B,KAGrCC,GAA6C,mBAC9CxE,EAAgB8B,KAAO,QADuB,cAE9C9B,EAAgBqD,OAAS,UAFqB,cAG9CrD,EAAgBmD,SAAW,YAHmB,cAI9CnD,EAAgB+B,QAAU,MAJoB,cAK9C/B,EAAgBG,KAAO,WALuB,GAO7CsE,EAAS,WACXF,GAASD,EAAK,GAAG,IAMrB,OAJAI,qBAAW,WACP,IAAMC,EAAQC,YAAYH,EAAO,KACjC,OAAO,kBAAMI,cAAcF,OAG3B,oBAAI7B,UAAU,iBAAd,mBACQ0B,EAAM7D,IADd,OACuB,IAAImE,OAAOR,QCN3BS,G,MAhBH,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,KACT3D,EAAM,IAAIwD,OAAOE,GAAKE,MAAM,IAClC,OACI,qCACI,oBAAIpC,UAAU,UAAd,SAAyBmC,IACzB,oBAAInC,UAAU,UAAd,SACKxB,EAAI4C,KAAI,SAACC,EAAEC,GAAH,OACL,oBAAItB,UAAU,WAAesB,aCQlCe,G,MAdO,SAAC,GAAwC,IAAtC3E,EAAqC,EAArCA,WAGrB,OACI,oBAAIsC,UAAU,oBAAd,SACMvB,OAAOC,KAAKhB,GAAyC0D,KAAI,SAACzD,EAAK2D,GAAN,OACvD,6BACI,cAAC,EAAD,CAAKa,KAAMxE,EAAKuE,IAAKxE,EAAWC,MAD3B2D,UCUVnB,G,MAhBGC,YAAQF,EAAgB,GAgB3BC,EAZC,SAAC,GAAqC,IAApCzC,EAAmC,EAAnCA,WAAWG,EAAwB,EAAxBA,MAEzB,OACI,0BAASmC,UAAU,mBAAnB,UACI,cAAC,EAAD,CAAetC,WAAYA,IAC3B,cAAC,EAAD,CAAYG,MAAOA,WCUhByE,G,MAnBI,WACf,IAAMC,EAAS,WACX,IAAM1E,EAAQ8B,EAAM6C,WACpB7C,EAAM8C,SAAStE,EAAeN,EAAMI,aAMxC,OAJA2D,qBAAW,WACP,IAAMC,EAAQC,YAAYS,EAAO,KACjC,OAAO,kBAAMR,cAAcF,OAG3B,cAAC,IAAD,CAAUlC,MAASA,EAAnB,SACI,sBAAKK,UAAU,kBAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,WCRD0C,MARf,WACE,OACE,qBAAK1C,UAAU,MAAf,SACE,cAAC,EAAD,OCMS2C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.622d5a81.chunk.js","sourcesContent":["enum TamagotchiState {\n    STANDAR,\n    SLEEPING,\n    WORK,\n    EATING,\n    DEAD,\n}\n\nexport {TamagotchiState};","export const EAT = \"EAT\";\nexport const SLEEP = \"SLEEP\";\nexport const WORK = \"WORK\";\nexport const DIE = \"DIE\";\nexport const TO_DEF_MODE = \"TO_DEF_MODE\";\nexport const DAMAGE_BY_IDLE = \"DAMAGE_BY_IDLE\";","import { ITamagotchi } from '../app/ITamagotchi';\nimport { TamagotchiState } from '../app/TamagotchiState';\nimport * as actionTypes from './actionTypes';\nimport { TamagotchiAction } from './types';\n\nconst limitMax = (n:number)=>{\n    return n<=10?n:10;\n}\nconst limitMin = (n:number)=>{\n    return n>=0?n:0;\n}\nconst communOper = (tamagotchi:ITamagotchi, key:keyof ITamagotchi, actionT:string, state:TamagotchiState, plus:number)=>{\n    const action: TamagotchiAction = {\n        type: actionT,\n        tamagotch: {\n            ...tamagotchi,\n            [key]: limitMax(tamagotchi[key]+plus)\n        },\n        currState: state\n    }\n    return action;\n}\nexport function eat(tamagotchi:ITamagotchi){\n    return communOper(\n        tamagotchi,\n        'hungry',\n        actionTypes.EAT,\n        TamagotchiState.EATING,\n        3\n    )    \n}\nexport function work(tamagotchi:ITamagotchi){\n    return communOper(\n        tamagotchi,\n        'health',\n        actionTypes.WORK,\n        TamagotchiState.WORK,\n        2\n    )    \n}\nexport function sleep(tamagotchi:ITamagotchi){\n    return communOper(\n        tamagotchi,\n        'sleep',\n        actionTypes.SLEEP,\n        TamagotchiState.SLEEPING,\n        4\n    )    \n}\nexport function dead(tamagotch:ITamagotchi){\n    const action: TamagotchiAction = {\n        type: actionTypes.DIE,\n        tamagotch: {\n            hungry:0,\n            health:0,\n            sleep:0\n        },\n        currState: TamagotchiState.DEAD\n    }\n    return action;\n}\nexport function to_def_mode(tamagotch:ITamagotchi){\n    const action: TamagotchiAction = {\n        type: actionTypes.TO_DEF_MODE,\n        tamagotch: {\n            ...tamagotch\n        },\n        currState: TamagotchiState.STANDAR\n    }\n    return action;\n}\nexport function damage_by_idle(tamagotch:ITamagotchi){\n    const tama:ITamagotchi = {\n        health: 0,\n        hungry: 0,\n        sleep: 0\n    };\n    const arr = (Object.keys(tamagotch) as Array<keyof ITamagotchi>);\n    arr\n        .forEach(key => {\n            tama[key] = limitMin(tamagotch[key]-1)\n        })\n    const die = arr.reduce((acc,curr)=>acc||tama[curr]===0,false);\n    if(die)\n        return dead(tama);\n    const action: TamagotchiAction = {\n        type: actionTypes.DAMAGE_BY_IDLE,\n        tamagotch: {\n            ...tama\n        },\n        currState: TamagotchiState.STANDAR\n    }\n    return action;\n}\n","import { TamagotchiAction, Tamagotchi_State } from \"../actions/types\";\nimport { TamagotchiState } from \"../app/TamagotchiState\";\nimport * as actionTypes from '../actions/actionTypes'\n\nconst initialState:Tamagotchi_State = {\n    tamagotch: {\n        health: 5,\n        hungry: 3,\n        sleep: 1\n    },\n    currState: TamagotchiState.STANDAR\n};\n\nconst tamagotchiReducer = (\n    state:Tamagotchi_State= initialState,\n    action:TamagotchiAction):Tamagotchi_State => {\n    if(state.currState === TamagotchiState.DEAD )\n        return state;\n    switch (action.type) {\n        case actionTypes.EAT:\n        case actionTypes.SLEEP:\n        case actionTypes.WORK:\n            if(state.currState === TamagotchiState.STANDAR){\n                return {\n                    currState: action.currState,\n                    tamagotch: {...action.tamagotch}\n                }\n            }\n            return state;\n        case actionTypes.TO_DEF_MODE:\n            return {\n                currState: action.currState,\n                tamagotch: {...state.tamagotch}\n            }\n        case actionTypes.DAMAGE_BY_IDLE:\n        case actionTypes.DIE:\n\n            return {\n                currState: action.currState,\n                tamagotch: {...action.tamagotch}\n            }\n        default:\n            return state;\n    }\n}\n\nexport default tamagotchiReducer;","import { applyMiddleware, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Tamagotchi_State } from './actions/types';\nimport { TamagotchiState } from './app/TamagotchiState';\nimport tamagotchiReducer from './reducers/tamagotchiReducers';\n\n\nconst initialState:Tamagotchi_State = {\n    tamagotch: {\n        health: 5,\n        hungry: 3,\n        sleep: 1\n    },\n    currState: TamagotchiState.STANDAR\n};\n\nconst middleWare = [thunk];\n\ndeclare global {\n    interface Window {\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n  }\n  \nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    tamagotchiReducer,\n    initialState,\n    composeEnhancers(\n        applyMiddleware(...middleWare),\n    )\n)\nexport default store;","import './styles.css'\n\ninterface ButtonProps {\n    name:string,\n    action:()=> void\n}\n\nconst Button = ({name,action}:ButtonProps) => {\n    return (\n        <section className=\"Button__section\">\n            <button className=\"Button__button\" onClick={()=>action()}>\n\n            </button>\n            <h2>\n                {name}\n            </h2>\n        </section>\n    )\n}\n\nexport default Button;","import { Tamagotchi_State } from \"../../actions/types\";\n\nconst mapStateToProps = (state:Tamagotchi_State) => ({\n    tamagotchi:state.tamagotch,\n    state:state.currState\n})\n\nexport default mapStateToProps;","\nimport { connect, ConnectedProps } from 'react-redux';\nimport Button from '../button';\nimport mapStateToProps from '../mapStateToProps';\nimport './styles.css'\nimport {sleep,eat,work,to_def_mode} from '../../actions/actionCreator';\nimport { useState } from 'react';\n\nconst connector = connect(mapStateToProps,{sleep,eat,work,to_def_mode})\n\ntype PropsButtons = ConnectedProps< typeof connector >\n\ninterface But {\n    action:()=>void,\n    name:string\n}\n\nconst Buttons = ({tamagotchi, sleep, eat, work,to_def_mode}:PropsButtons) =>{\n    const [call,setCall] = useState(false);\n    const operProxy = (func:()=>void)=>()=>{\n        func();\n        if(!call)\n        setTimeout(\n            ()=>{\n                to_def_mode(tamagotchi);\n                setCall(false);\n            },\n            3000\n        )\n        setCall(true);\n    }\n    const p_sleep = operProxy(()=>{sleep(tamagotchi)});\n    const p_eat = operProxy(()=>{eat(tamagotchi)});\n    const p_work = operProxy(()=>{work(tamagotchi)});\n    \n    const Buts:But[] = [\n        {action:()=>{\n            p_sleep()\n        },name:\"Sleep\"},\n        {action:()=>{\n            p_work()\n        },name:\"Work\"},\n        {action:()=>{\n            p_eat()\n        },name:\"Eat\"}\n    ]\n\n    return (\n        <nav className=\"Buttons__nav\">\n            <ul>\n                {Buts.map((v,i)=>(\n                    <li key={i}>\n                        <Button name={v.name} action={v.action}/>                        \n                    </li>\n                ))}\n            </ul>\n        </nav>\n    )\n}\n\nexport default connector(Buttons);","import { useEffect, useState } from \"react\"\nimport { TamagotchiState } from \"../../app/TamagotchiState\"\nimport { EnumDictionary } from \"../../app/EnumDictionary\"\n\nimport './styles.css'\n\ninterface PropsDisplayImg {\n    state:TamagotchiState\n}\n\nconst DisplayImg = ({state}:PropsDisplayImg) =>{\n    const [dots,setDots] = useState(0);\n    \n    const swith: EnumDictionary<TamagotchiState,string> = {\n        [TamagotchiState.DEAD]: \"Dead\",\n        [TamagotchiState.EATING]: \"Eating\",\n        [TamagotchiState.SLEEPING]: \"Sleeping\",\n        [TamagotchiState.STANDAR]: \";3\",\n        [TamagotchiState.WORK]: \"Working\"\n    }\n    const upDots = () =>{\n        setDots((dots+1)%4);\n    }\n    useEffect( () =>{\n        const timer = setInterval(upDots,1000);\n        return () => clearInterval(timer);\n    })\n    return (\n        <h1 className=\"DisplayImg__h1\" >\n            {`${swith[state]}${'.'.repeat(dots)}`}\n        </h1>\n    )\n}\n\nexport default DisplayImg","import './styles.css'\n\ninterface PropsBar {\n    val: number;\n    text: string;\n}\n\nconst Bar = ({val, text}:PropsBar) =>{\n    const arr = \"a\".repeat(val).split('');\n    return (\n        <>\n            <h1 className=\"Bar__h1\">{text}</h1>\n            <ul className=\"Bar__ul\">\n                {arr.map((v,i)=>(\n                    <li className=\"Bar__li\" key={i}>\n                        \n                    </li>\n                ))}\n            </ul>\n        </>\n    )\n}\n\nexport default Bar;","import { ITamagotchi } from \"../../app/ITamagotchi\";\nimport Bar from \"../bar\";\nimport './styles.css'\n\ninterface PropsDisplayStatus {\n    tamagotchi: ITamagotchi\n}\n\nconst DisplayStatus = ({ tamagotchi }: PropsDisplayStatus) => {\n\n\n    return (\n        <ul className=\"DisplayStatus__ul\">\n            {(Object.keys(tamagotchi) as Array<keyof ITamagotchi>).map((key, i) => (\n                <li key={i}>\n                    <Bar text={key} val={tamagotchi[key]} />\n                </li>\n            ))}\n        </ul>\n    )\n}\n\nexport default DisplayStatus;","import DisplayImg from \"../displayImg\";\nimport DisplayStatus from \"../displayStatus\";\nimport './styles.css'\nimport { connect, ConnectedProps } from \"react-redux\";\nimport mapStateToProps from '../mapStateToProps';\n\n\n\nconst connector = connect(mapStateToProps,{});\n\ntype PropsDisplay = ConnectedProps<typeof connector>;\n\nconst Display = ({tamagotchi,state}:PropsDisplay) => {\n    \n    return (\n        <section className=\"Display__section\">\n            <DisplayStatus tamagotchi={tamagotchi} />\n            <DisplayImg state={state}/>        \n        </section>\n    )\n}\n\n\n\nexport default connector(Display);","import { useEffect } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { damage_by_idle } from \"../../actions/actionCreator\";\nimport store from \"../../store\";\nimport Buttons from \"../buttons\";\nimport Display from \"../display\"\nimport './styles.css';\n\nconst Tamagotchi = () => {\n    const damage = () => {\n        const state = store.getState();\n        store.dispatch(damage_by_idle(state.tamagotch));\n    }\n    useEffect( () =>{\n        const timer = setInterval(damage,10000);\n        return () => clearInterval(timer);\n    })\n    return (\n        <Provider store = {store}>\n            <div className=\"Tamagotchi__div\">\n                <Display />\n                <Buttons/>\n            </div>\n        </Provider>\n    )\n}\n\nexport default Tamagotchi","import React from 'react';\n\nimport './App.css';\nimport Tamagotchi from './components/tamagotchi';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tamagotchi/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}